# -*- sh -*-
[ -z $HYBRIS_ANDROID_URL ] && HYBRIS_ANDROID_URL=https://github.com/mer-hybris/android.git
[ -z $HYBRIS_REMOTE ] && HYBRIS_REMOTE=https://github.com/mer-hybris
[ -z $HYBRIS_REMOTE_DEVICE ] && HYBRIS_REMOTE_DEVICE=$HYBRIS_REMOTE
[ -z $HYBRIS_ANDROID_MANIFEST ] && HYBRIS_ANDROID_MANIFEST=default.xml
[ -z $HYBRIS_ANDROID_SRC_BRANCH ] && \
    HYBRIS_ANDROID_SRC_BRANCH=hybris-${HYBRIS_ANDROID_BRANCH}
[ -z $HYBRIS_ANDROID_SYSTEM_URL ] && \
    HYBRIS_ANDROID_SYSTEM_URL="$HYBRIS_REMOTE"/droid-system-$VENDOR-${FLAVOUR+$FLAVOUR-}template

sync()
{
    mkdir -p "$ANDROID_ROOT-syspart"

    cd "$ANDROID_ROOT-syspart"
    repo init -u "$HYBRIS_ANDROID_URL" \
         -b "$HYBRIS_SYSPART_BRANCH" \
         -m "$HYBRIS_ANDROID_MANIFEST" \
         --platform=linux
    repo forall -c git reset --hard HEAD
    repo forall -c git am --abort
    repo forall -c git clean -d -x -f
    repo  sync -j20 --fetch-submodules

    [ ! -e droid-src ] || [ -e droid-src/.git ] && \
        git_clone_or_update $HYBRIS_REMOTE/droid-src-$VENDOR \
                            droid-src \
                            -b ${HYBRIS_ANDROID_SRC_BRANCH}

    rm -rf patches
    ln -sf droid-src/patches patches
    droid-src/apply-patches.sh --mb
}
build()
{
    cd "$ANDROID_ROOT-syspart"
    # Current limitation is that Android 9 systemimage does not build in HABUILD_SDK, you will need to build it on your host
    # It built fine on Ubuntu 16.04, your Linux host OS in most cases should be compatible too

    source build/envsetup.sh
    export USE_CCACHE=1
    export LC_ALL=C
    lunch aosp_${DEVICE_NUM}-user

    # mkdir -p out/target/product/${HABUILD_DEVICE:-$DEVICE}

    # cp "$SOURCE_ROOT"/out/target/product/${HABUILD_DEVICE:-$DEVICE}/dtbo.img \
    #    out/target/product/${HABUILD_DEVICE:-$DEVICE}/.

    # cp "$SOURCE_ROOT"/out/target/product/${HABUILD_DEVICE:-$DEVICE}/kernel \
    #    out/target/product/${HABUILD_DEVICE:-$DEVICE}/.

    # Ensure the middlware in the previous terminal window has finished building
    # Change $(nproc --all) to your building capabilities, it will be very heavy on RAM if you go for more cores, proceed with care:
    make -j$(nproc --all) systemimage vendorimage
    # Go and have a cuppa, as this is going to take some time :)
    #  ,--.
    # C|  |
    #  `=='

    ./out/host/linux-x86/bin/simg2img \
        out/target/product/$HABUILD_DEVICE/system.img \
        $ANDROID_ROOT/system.img.raw.$DEVICE
    ./out/host/linux-x86/bin/simg2img \
        out/target/product/$HABUILD_DEVICE/vendor.img \
        $ANDROID_ROOT/vendor.img.raw.$DEVICE
}

build_sfos() {
    local tree_dirs
    for tree in system vendor ; do
        tree_dir=$ANDROID_ROOT-mnt/$tree
        mkdir -p $tree_dir
        # ensure your /tmp has ~4GB available
        # simg2img out/target/product/$HABUILD_DEVICE/system.img system.img.raw
        sudo mount -o loop $ANDROID_ROOT/$tree.img.raw.$DEVICE $tree_dir
        # no system as root
        if [ -e $tree_dir/$tree ] ; then
           tree_dir=$tree_dir/$tree
        fi
        tree_dirs+=(${tree_dir})
    done


    git_clone_or_update \
        ${HYBRIS_ANDROID_SYSTEM_URL} \
        $ANDROID_ROOT/hybris/mw/droid-system-$VENDOR-${FAMILY+$FAMILY-}$HABUILD_DEVICE

    (
        cd $ANDROID_ROOT/hybris/mw/droid-system-$VENDOR-${FAMILY+$FAMILY-}$HABUILD_DEVICE

        sudo ./droid-system-device/helpers/copy_tree.sh \
             "${tree_dirs[@]}" rpm/droid-system-$HABUILD_DEVICE.spec
        sudo chown -R $USER .
    )

    for tree in system vendor ; do
        tree_dir=$ANDROID_ROOT-mnt/$tree
        sudo umount $tree_dir
    done

}
